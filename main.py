"""
CURSO INTERACTIVO DE STREAMLIT
Por Daniel Mardones

Curso completo e interactivo para aprender Streamlit desde lo b√°sico 
hasta aplicaciones avanzadas con navegaci√≥n DOM-safe.
Asegurate que el modulo este cargado correctamente en informacion de debug.
"""

import streamlit as st
import hashlib
import time
import sys
import os

# ‚úÖ Configuraci√≥n de p√°gina (SOLO UNA VEZ)
if 'page_configured' not in st.session_state:
    st.set_page_config(
        page_title="Curso Streamlit Interactivo",
        page_icon="üéì",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    st.session_state.page_configured = True

# ‚úÖ Agregar los directorios de m√≥dulos al path
current_dir = os.path.dirname(__file__)
for modulo in ['modulo_01_fundamentos', 'modulo_02_visualizacion', 'modulo_03_interactividad', 
               'modulo_04_aplicaciones', 'modulo_05_despliegue', 'modulo_06_bonus_automatizacion',
               'modulo_07_evaluacion']:
    module_dir = os.path.join(current_dir, modulo)
    if module_dir not in sys.path:
        sys.path.insert(0, module_dir)

# ‚úÖ Importar m√≥dulos existentes
@st.cache_resource
def import_modules():
    """Importa m√≥dulos con cache para optimizar."""
    try:
        # M√≥dulo 1: Fundamentos
        import hello_world
        import widgets_basicos
        import sidebar_layout
        
        # M√≥dulo 2: Visualizaci√≥n
        import graficos_basicos
        import dashboards_interactivos
        
        # M√≥dulo 3: Interactividad
        import manejo_datos
        
        # M√≥dulo 4: Aplicaciones
        import calculadora_financiera
        import sistema_inventario
        
        # M√≥dulo 5: Despliegue
        import streamlit_cloud
          # M√≥dulo 6: Bonus Automatizaci√≥n
        import github_actions
        
        # M√≥dulo 7: Evaluaci√≥n
        import test_interactivo
        
        return {
            # M√≥dulo 1
            'hello_world': hello_world,
            'widgets_basicos': widgets_basicos,
            'sidebar_layout': sidebar_layout,
            # M√≥dulo 2
            'graficos_basicos': graficos_basicos,
            'dashboards_interactivos': dashboards_interactivos,
            # M√≥dulo 3
            'manejo_datos': manejo_datos,
            # M√≥dulo 4
            'calculadora_financiera': calculadora_financiera,
            'sistema_inventario': sistema_inventario,            # M√≥dulo 5
            'streamlit_cloud': streamlit_cloud,
            # M√≥dulo 6
            'github_actions': github_actions,
            # M√≥dulo 7
            'test_interactivo': test_interactivo
        }
    except ImportError as e:
        st.error(f"‚ùå Error importando m√≥dulos: {e}")
        st.error(f"üîç Directorio de m√≥dulos: {module_dir}")
        st.error(f"üìÅ Existe el directorio: {os.path.exists(module_dir)}")
        if os.path.exists(module_dir):
            files = os.listdir(module_dir)
            st.error(f"üìã Archivos encontrados: {files}")
        st.stop()
        return None

# ‚úÖ Obtener m√≥dulos importados
modules = import_modules()

def generate_safe_key(base_key: str, context: str = "default") -> str:
    """Genera keys √∫nicos y seguros."""
    combined = f"{context}_{base_key}_{time.time_ns()}"
    hash_obj = hashlib.md5(combined.encode())
    return f"{context}_{base_key}_{hash_obj.hexdigest()[:8]}"

def initialize_navigation_state():
    """Inicializa el estado de navegaci√≥n."""
    if 'navigation' not in st.session_state:
        st.session_state.navigation = {
            'current_module': 'M√≥dulo 1: Fundamentos',
            'current_class': 'Clase 1: Hello, Streamlit',
            'last_update': time.time()
        }
    return st.session_state.navigation

def render_sidebar_navigation():
    """Renderiza la navegaci√≥n en el sidebar."""
    nav_state = initialize_navigation_state()
    
    with st.sidebar:
        st.markdown("# üìö Curso Streamlit")
        st.markdown("*Por Daniel Mardones*")
        st.markdown("---")
        
        # ‚úÖ Selector de m√≥dulo con key fijo
        selected_module = st.selectbox(
            "üìñ Selecciona un m√≥dulo:",            [
                "M√≥dulo 1: Fundamentos",
                "M√≥dulo 2: Visualizaci√≥n",
                "M√≥dulo 3: Interactividad", 
                "M√≥dulo 4: Aplicaciones",
                "M√≥dulo 5: Despliegue",
                "Bonus: Automatizaci√≥n",
                "M√≥dulo 7: Evaluaci√≥n"
            ],
            index=0,
            key="module_selector_fixed"
        )
        
        # ‚úÖ Selector de clase seg√∫n el m√≥dulo seleccionado
        selected_class = None
        if selected_module == "M√≥dulo 1: Fundamentos":
            selected_class = st.radio(
                "üìù Selecciona la clase:",
                [
                    "Clase 1: Hello, Streamlit",
                    "Clase 2: Widgets b√°sicos",
                    "Clase 3: Sidebar y layout"
                ],
                index=0,
                key="class_selector_modulo1"
            )
        elif selected_module == "M√≥dulo 2: Visualizaci√≥n":
            selected_class = st.radio(
                "üìä Selecciona la clase:",
                [
                    "Clase 1: Gr√°ficos b√°sicos",
                    "Clase 2: Dashboards interactivos"
                ],
                index=0,
                key="class_selector_modulo2"
            )
        elif selected_module == "M√≥dulo 3: Interactividad":
            selected_class = st.radio(
                "üîÑ Selecciona la clase:",
                [
                    "Clase 1: Manejo de datos"
                ],
                index=0,
                key="class_selector_modulo3"
            )
        elif selected_module == "M√≥dulo 4: Aplicaciones":
            selected_class = st.radio(
                "üèóÔ∏è Selecciona la clase:",
                [
                    "Clase 1: Calculadora financiera",
                    "Clase 2: Sistema de inventario"
                ],
                index=0,
                key="class_selector_modulo4"
            )
        elif selected_module == "M√≥dulo 5: Despliegue":
            selected_class = st.radio(
                "‚òÅÔ∏è Selecciona la clase:",                [
                    "Clase 1: Streamlit Cloud"
                ],
                index=0,
                key="class_selector_modulo5"
            )
        elif selected_module == "Bonus: Automatizaci√≥n":
            selected_class = st.radio(
                "ü§ñ Selecciona la clase:",
                [
                    "Clase 1: GitHub Actions"
                ],
                index=0,
                key="class_selector_modulo6"
            )
        elif selected_module == "M√≥dulo 7: Evaluaci√≥n":
            selected_class = st.radio(
                "üéØ Selecciona la clase:",
                [
                    "Clase 1: Test Interactivo"
                ],
                index=0,
                key="class_selector_modulo7"
            )
        
        # ‚úÖ Informaci√≥n de estado
        st.markdown("---")
        st.markdown("### üìä Estado Actual")
        st.write(f"**M√≥dulo:** {selected_module}")
        if selected_class:
            st.write(f"**Clase:** {selected_class}")
          # ‚úÖ Actualizar estado solo si cambi√≥
        if (nav_state['current_module'] != selected_module or 
            nav_state['current_class'] != selected_class):
            
            nav_state['current_module'] = selected_module
            nav_state['current_class'] = selected_class
            nav_state['last_update'] = time.time()
            
            # ‚úÖ Limpiar cache de m√≥dulos para evitar conflictos DOM
            if hasattr(st, 'cache_resource'):
                st.cache_resource.clear()
            
            # ‚úÖ Forzar rerun para actualizar contenido
            st.rerun()
        
        return selected_module, selected_class

def render_main_content(selected_module: str, selected_class: str):
    """Renderiza el contenido principal."""
    
    # ‚úÖ Header principal
    st.title("üéì Curso Completo e Interactivo de Streamlit")
    st.markdown("""
    **Bienvenido al curso interactivo de Streamlit por Daniel Mardones**
    
    Aprende Streamlit desde lo b√°sico hasta aplicaciones avanzadas con lecciones interactivas.
    
    Asegurate que el modulo este cargado correctamente en informacion de debug.
    """)
      # ‚úÖ Informaci√≥n de versi√≥n
    col1, col2, col3 = st.columns([2, 1, 1])
    with col1:
        st.info("üéì **Curso Streamlit Interactivo**: Navegaci√≥n optimizada + DOM-safe")
    with col2:
        st.metric("Streamlit", st.__version__)
    with col3:
        st.metric("M√≥dulos", "11 clases totales")
    
    st.markdown("---")
    
    # ‚úÖ Renderizar contenido basado en selecci√≥n
    if selected_class:  # Si hay una clase seleccionada
        
        # ‚úÖ Mapeo completo de clases a m√≥dulos
        class_to_module = {
            # M√≥dulo 1: Fundamentos
            "Clase 1: Hello, Streamlit": modules['hello_world'],
            "Clase 2: Widgets b√°sicos": modules['widgets_basicos'],
            "Clase 3: Sidebar y layout": modules['sidebar_layout'],
            # M√≥dulo 2: Visualizaci√≥n  
            "Clase 1: Gr√°ficos b√°sicos": modules['graficos_basicos'],
            "Clase 2: Dashboards interactivos": modules['dashboards_interactivos'],
            # M√≥dulo 3: Interactividad
            "Clase 1: Manejo de datos": modules['manejo_datos'],
            # M√≥dulo 4: Aplicaciones
            "Clase 1: Calculadora financiera": modules['calculadora_financiera'],
            "Clase 2: Sistema de inventario": modules['sistema_inventario'],            # M√≥dulo 5: Despliegue
            "Clase 1: Streamlit Cloud": modules['streamlit_cloud'],
            # M√≥dulo 6: Bonus Automatizaci√≥n
            "Clase 1: GitHub Actions": modules['github_actions'],
            # M√≥dulo 7: Evaluaci√≥n
            "Clase 1: Test Interactivo": modules['test_interactivo']
        }
        
        if selected_class in class_to_module:
            try:
                # ‚úÖ Mostrar informaci√≥n de la clase actual
                st.markdown(f"### üéØ {selected_class}")
                st.markdown(f"**M√≥dulo:** {selected_module}")
                  # ‚úÖ Contenedor para el m√≥dulo
                module_container = st.container()
                
                with module_container:
                    # ‚úÖ Ejecutar el m√≥dulo correspondiente
                    current_module = class_to_module[selected_class]
                    
                    # ‚úÖ Debug info
                    with st.expander("üîç Informaci√≥n de Debug", expanded=False):
                        st.write(f"**M√≥dulo ejecutado:** {current_module.__name__}")
                        st.write(f"**Funci√≥n run disponible:** {hasattr(current_module, 'run')}")
                        st.write(f"**Timestamp:** {time.strftime('%H:%M:%S')}")
                    
                    # ‚úÖ Ejecutar funci√≥n run del m√≥dulo con protecci√≥n DOM
                    try:
                        if hasattr(current_module, 'run'):
                            # Crear contenedor √∫nico para cada m√≥dulo
                            with st.container():
                                current_module.run()
                        else:
                            st.error(f"‚ùå El m√≥dulo {current_module.__name__} no tiene funci√≥n 'run()'")
                    except Exception as module_error:
                        st.error(f"‚ùå Error espec√≠fico del m√≥dulo {current_module.__name__}: {str(module_error)}")
                        with st.expander("üîç Detalles del error del m√≥dulo"):
                            st.exception(module_error)
                        
            except Exception as e:
                st.error(f"‚ùå Error ejecutando la clase: {str(e)}")
                with st.expander("üîç Detalles del error"):
                    st.exception(e)
        else:
            st.warning(f"‚ö†Ô∏è La clase '{selected_class}' no est√° disponible a√∫n.")
    
    else:
        # ‚úÖ Contenido para m√≥dulos en construcci√≥n o sin clase seleccionada
        st.warning("üöß Selecciona una clase del m√≥dulo para ver el contenido")
        st.markdown("""        ### üìö Estado de M√≥dulos:
        - ‚úÖ **M√≥dulo 1: Fundamentos** (3 clases disponibles)
        - ‚úÖ **M√≥dulo 2: Visualizaci√≥n** (2 clases disponibles)
        - ‚úÖ **M√≥dulo 3: Interactividad** (1 clase disponible)
        - ‚úÖ **M√≥dulo 4: Aplicaciones** (2 clases disponibles)
        - ‚úÖ **M√≥dulo 5: Despliegue** (1 clase disponible)
        - ‚úÖ **Bonus: Automatizaci√≥n** (1 clase disponible)
        - ‚úÖ **M√≥dulo 7: Evaluaci√≥n** (1 clase disponible)
        
        ### üéØ C√≥mo usar el curso:
        1. **Selecciona un m√≥dulo** en el men√∫ lateral
        2. **Elige una clase** del m√≥dulo seleccionado
        3. **Interact√∫a** con las lecciones y ejemplos
        4. **Practica** modificando los par√°metros
        """)

def main():
    """Funci√≥n principal corregida."""
    try:
        # ‚úÖ 1. Navegaci√≥n en sidebar
        selected_module, selected_class = render_sidebar_navigation()
        
        # ‚úÖ 2. Contenido principal
        render_main_content(selected_module, selected_class)
        
        # ‚úÖ 3. Footer en sidebar
        with st.sidebar:
            st.markdown("---")
            st.markdown("### üë®‚Äçüíª Autor")
            st.markdown("**Daniel Mardones**")
            st.markdown("üß† Especialista en Python & Data Science")
            st.markdown("[üîó GitHub](https://github.com/Denniels)")
            
    except Exception as e:
        st.error(f"‚ùå Error en la aplicaci√≥n principal: {str(e)}")
        with st.expander("üîç Detalles del error"):
            st.exception(e)

# ‚úÖ Ejecutar aplicaci√≥n
if __name__ == "__main__":
    main()
